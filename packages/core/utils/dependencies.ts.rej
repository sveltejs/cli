diff a/packages/core/utils/dependencies.ts b/packages/core/utils/dependencies.ts	(rejected hunks)
@@ -4,55 +4,41 @@ import { COMMANDS } from 'package-manager-detector/agents';
 import { spinner } from '@svelte-add/clack-prompts';
 import { executeCli } from './cli.js';
 
-export type PackageManager = (typeof packageManagers)[number];
+type PackageManager = (typeof packageManagers)[number] | undefined;
 const packageManagers = ['npm', 'pnpm', 'yarn', 'bun'] as const;
 
 /**
- * @param workingDirectory
- * @returns the package manager
- */
-export async function selectPackageManager(
-	workingDirectory: string,
-): Promise<PackageManager | undefined> {
-	const detectedPm = await detect({ cwd: workingDirectory });
-	let pm = normalizePackageManager(detectedPm.agent);
-
-	if (!pm) {
-		pm = await selectPrompt(
-			'Which package manager do you want to install dependencies with?',
-			undefined,
-			[
-				{
-					label: 'None',
-					value: undefined,
-				},
-				...packageManagers.map((x) => {
-					return { label: x, value: x };
-				}),
-			],
-		);
-	}
-
-	return pm;
-}
-
-/**
- * @param packageManager
  * @param workingDirectory
  * @returns the install status of dependencies
  */
 export async function suggestInstallingDependencies(
-	packageManager: PackageManager | undefined,
 	workingDirectory: string,
 ): Promise<'installed' | 'skipped'> {
-	if (!packageManager || !COMMANDS[packageManager]) {
+	const detectedPm = await detect({ cwd: workingDirectory });
+	let selectedPm = detectedPm.agent;
+
+	selectedPm ??= await selectPrompt(
+		'Which package manager do you want to install dependencies with?',
+		undefined,
+		[
+			{
+				label: 'None',
+				value: undefined,
+			},
+			...packageManagers.map((x) => {
+				return { label: x, value: x as PackageManager };
+			}),
+		],
+	);
+
+	if (!selectedPm || !COMMANDS[selectedPm]) {
 		return 'skipped';
 	}
 
 	const loadingSpinner = spinner();
 	loadingSpinner.start('Installing dependencies...');
 
-	const installCommand = COMMANDS[packageManager].install;
+	const installCommand = COMMANDS[selectedPm].install;
 	const [pm, install] = installCommand.split(' ');
 	await installDependencies(pm, [install], workingDirectory);
 
