diff a/packages/core/utils/dependencies.ts b/packages/core/utils/dependencies.ts	(rejected hunks)
@@ -4,9 +4,21 @@ import { COMMANDS } from 'package-manager-detector/agents';
 import { spinner } from '@svelte-add/clack-prompts';
 import { executeCli } from './cli.js';
 
-type PackageManager = (typeof packageManagers)[number] | undefined;
+export type PackageManager = (typeof packageManagers)[number];
 const packageManagers = ['npm', 'pnpm', 'yarn', 'bun'] as const;
 
+/**
+ * @param workingDirectory
+ * @returns the package manager
+ */
+export async function detectPackageManager(
+	workingDirectory: string,
+): Promise<PackageManager | undefined> {
+	const detectedPm = await detect({ cwd: workingDirectory });
+	const pm = normalizePackageManager(detectedPm.agent);
+	return pm;
+}
+
 /**
  * @param workingDirectory
  * @returns the install status of dependencies
@@ -14,22 +26,23 @@ const packageManagers = ['npm', 'pnpm', 'yarn', 'bun'] as const;
 export async function suggestInstallingDependencies(
 	workingDirectory: string,
 ): Promise<'installed' | 'skipped'> {
-	const detectedPm = await detect({ cwd: workingDirectory });
-	let selectedPm = detectedPm.agent;
-
-	selectedPm ??= await selectPrompt(
-		'Which package manager do you want to install dependencies with?',
-		undefined,
-		[
-			{
-				label: 'None',
-				value: undefined,
-			},
-			...packageManagers.map((x) => {
-				return { label: x, value: x as PackageManager };
-			}),
-		],
-	);
+	let selectedPm = await detectPackageManager(workingDirectory);
+
+	if (!selectedPm) {
+		selectedPm = await selectPrompt(
+			'Which package manager do you want to install dependencies with?',
+			undefined,
+			[
+				{
+					label: 'None',
+					value: undefined,
+				},
+				...packageManagers.map((x) => {
+					return { label: x, value: x };
+				}),
+			],
+		);
+	}
 
 	if (!selectedPm || !COMMANDS[selectedPm]) {
 		return 'skipped';
